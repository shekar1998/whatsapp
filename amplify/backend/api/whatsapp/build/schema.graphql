type User {
  id: ID!
  name: String!
  imageUri: String
  status: String
  profilename: String
  CharRoomUser(charRoomId: ModelIDKeyConditionInput, filter: ModelCharRoomUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCharRoomUserConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CharRoomUser {
  id: ID!
  userId: ID!
  charRoomId: ID!
  user: User
  ChatRoom: ChatRoom
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ChatRoom {
  id: ID!
  CharRoomUsers(userId: ModelIDKeyConditionInput, filter: ModelCharRoomUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCharRoomUserConnection
  messages(createdAt: ModelStringKeyConditionInput, filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection
  lastMessageId: ID
  lastMessage: Message
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Message {
  id: ID!
  content: String
  createdAt: String
  userId: ID!
  charRoomId: ID!
  user: User
  ChatRoom: ChatRoom
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  imageUri: ModelStringInput
  status: ModelStringInput
  profilename: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getCharRoomUser(id: ID!): CharRoomUser
  listCharRoomUsers(filter: ModelCharRoomUserFilterInput, limit: Int, nextToken: String): ModelCharRoomUserConnection
  getChatRoom(id: ID!): ChatRoom
  listChatRooms(filter: ModelChatRoomFilterInput, limit: Int, nextToken: String): ModelChatRoomConnection
  getMessage(id: ID!): Message
  listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection
  messageByChatRoom(charRoomId: ID, createdAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection
}

input CreateUserInput {
  id: ID
  name: String!
  imageUri: String
  status: String
  profilename: String
}

input UpdateUserInput {
  id: ID!
  name: String
  imageUri: String
  status: String
  profilename: String
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createCharRoomUser(input: CreateCharRoomUserInput!, condition: ModelCharRoomUserConditionInput): CharRoomUser
  updateCharRoomUser(input: UpdateCharRoomUserInput!, condition: ModelCharRoomUserConditionInput): CharRoomUser
  deleteCharRoomUser(input: DeleteCharRoomUserInput!, condition: ModelCharRoomUserConditionInput): CharRoomUser
  createChatRoom(input: CreateChatRoomInput!, condition: ModelChatRoomConditionInput): ChatRoom
  updateChatRoom(input: UpdateChatRoomInput!, condition: ModelChatRoomConditionInput): ChatRoom
  deleteChatRoom(input: DeleteChatRoomInput!, condition: ModelChatRoomConditionInput): ChatRoom
  createMessage(input: CreateMessageInput!, condition: ModelMessageConditionInput): Message
  updateMessage(input: UpdateMessageInput!, condition: ModelMessageConditionInput): Message
  deleteMessage(input: DeleteMessageInput!, condition: ModelMessageConditionInput): Message
}

input ModelUserConditionInput {
  name: ModelStringInput
  imageUri: ModelStringInput
  status: ModelStringInput
  profilename: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateCharRoomUser: CharRoomUser @aws_subscribe(mutations: ["createCharRoomUser"])
  onUpdateCharRoomUser: CharRoomUser @aws_subscribe(mutations: ["updateCharRoomUser"])
  onDeleteCharRoomUser: CharRoomUser @aws_subscribe(mutations: ["deleteCharRoomUser"])
  onCreateChatRoom: ChatRoom @aws_subscribe(mutations: ["createChatRoom"])
  onUpdateChatRoom: ChatRoom @aws_subscribe(mutations: ["updateChatRoom"])
  onDeleteChatRoom: ChatRoom @aws_subscribe(mutations: ["deleteChatRoom"])
  onCreateMessage: Message @aws_subscribe(mutations: ["createMessage"])
  onUpdateMessage: Message @aws_subscribe(mutations: ["updateMessage"])
  onDeleteMessage: Message @aws_subscribe(mutations: ["deleteMessage"])
}

type ModelCharRoomUserConnection {
  items: [CharRoomUser]
  nextToken: String
}

input ModelCharRoomUserFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  charRoomId: ModelIDInput
  and: [ModelCharRoomUserFilterInput]
  or: [ModelCharRoomUserFilterInput]
  not: ModelCharRoomUserFilterInput
}

input CreateCharRoomUserInput {
  id: ID
  userId: ID!
  charRoomId: ID!
}

input UpdateCharRoomUserInput {
  id: ID!
  userId: ID
  charRoomId: ID
}

input DeleteCharRoomUserInput {
  id: ID!
}

input ModelCharRoomUserConditionInput {
  userId: ModelIDInput
  charRoomId: ModelIDInput
  and: [ModelCharRoomUserConditionInput]
  or: [ModelCharRoomUserConditionInput]
  not: ModelCharRoomUserConditionInput
}

type ModelChatRoomConnection {
  items: [ChatRoom]
  nextToken: String
}

input ModelChatRoomFilterInput {
  id: ModelIDInput
  lastMessageId: ModelIDInput
  and: [ModelChatRoomFilterInput]
  or: [ModelChatRoomFilterInput]
  not: ModelChatRoomFilterInput
}

input CreateChatRoomInput {
  id: ID
  lastMessageId: ID
}

input UpdateChatRoomInput {
  id: ID!
  lastMessageId: ID
}

input DeleteChatRoomInput {
  id: ID!
}

input ModelChatRoomConditionInput {
  lastMessageId: ModelIDInput
  and: [ModelChatRoomConditionInput]
  or: [ModelChatRoomConditionInput]
  not: ModelChatRoomConditionInput
}

type ModelMessageConnection {
  items: [Message]
  nextToken: String
}

input ModelMessageFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  createdAt: ModelStringInput
  userId: ModelIDInput
  charRoomId: ModelIDInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
}

input CreateMessageInput {
  id: ID
  content: String
  createdAt: String
  userId: ID!
  charRoomId: ID!
}

input UpdateMessageInput {
  id: ID!
  content: String
  createdAt: String
  userId: ID
  charRoomId: ID
}

input DeleteMessageInput {
  id: ID!
}

input ModelMessageConditionInput {
  content: ModelStringInput
  createdAt: ModelStringInput
  userId: ModelIDInput
  charRoomId: ModelIDInput
  and: [ModelMessageConditionInput]
  or: [ModelMessageConditionInput]
  not: ModelMessageConditionInput
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
